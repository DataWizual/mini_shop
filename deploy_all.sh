#!/usr/bin/env bash
set -euo pipefail

# === CONFIG ===
PROJECT_DIR=~/mini_shop
MONITORING_DIR=$PROJECT_DIR/monitoring
LOG_FILE="$PROJECT_DIR/deploy_all_$(date +%Y%m%d_%H%M%S).log"

# === LOG HEADER ===
{
echo "==============================================================="
echo "üöÄ FULL DEPLOYMENT PIPELINE STARTED ‚Äî $(date)"
echo "==============================================================="
echo "üìò Log file: $LOG_FILE"
echo "---------------------------------------------------------------"
} | tee -a "$LOG_FILE"

# === DEPENDENCY CHECK ===
echo "üîç Checking dependencies..." | tee -a "$LOG_FILE"

for cmd in docker curl bash; do
  if ! command -v $cmd &>/dev/null; then
    echo "‚ùå Missing dependency: $cmd" | tee -a "$LOG_FILE"
    exit 1
  fi
done

# –ü—Ä–æ–≤–µ—Ä–∫–∞ docker compose (v2) –∏–ª–∏ docker-compose (v1)
if docker compose version &>/dev/null; then
  COMPOSE_CMD="docker compose"
elif command -v docker-compose &>/dev/null; then
  COMPOSE_CMD="docker-compose"
else
  echo "‚ùå Missing dependency: docker compose or docker-compose" | tee -a "$LOG_FILE"
  exit 1
fi

echo "‚úÖ All dependencies found." | tee -a "$LOG_FILE"

# === üß† SAFETY CHECK ‚Äî —É–¥–∞–ª–µ–Ω–∏–µ –ë–î —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º ===
if docker volume inspect mini_shop_db_data >/dev/null 2>&1; then
  echo "‚ö†Ô∏è  –û–±–Ω–∞—Ä—É–∂–µ–Ω volume –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: mini_shop_db_data" | tee -a "$LOG_FILE"
  read -p "‚ùì –£–¥–∞–ª–∏—Ç—å –ë–î (–¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç –ø–æ—Ç–µ—Ä—è–Ω—ã)? [y/N]: " confirm
  if [[ "$confirm" =~ ^[Yy]$ ]]; then
    echo "üóëÔ∏è  –£–¥–∞–ª—è–µ–º volume –ë–î..." | tee -a "$LOG_FILE"
    docker volume rm -f mini_shop_db_data >> "$LOG_FILE" 2>&1 || true
  else
    echo "üíæ Volume mini_shop_db_data —Å–æ—Ö—Ä–∞–Ω—ë–Ω." | tee -a "$LOG_FILE"
  fi
else
  echo "‚ÑπÔ∏è  Volume mini_shop_db_data –Ω–µ –Ω–∞–π–¥–µ–Ω." | tee -a "$LOG_FILE"
fi

# === CLEANUP (–±–µ–∑ —É–¥–∞–ª–µ–Ω–∏—è –ë–î) ===
echo "üßπ Cleaning up old containers and networks..." | tee -a "$LOG_FILE"

# –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏ —É–¥–∞–ª—è–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ–Ω—É–∂–Ω—ã–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã monitoring –∏ backend
$COMPOSE_CMD -f $PROJECT_DIR/docker-compose.yml down --remove-orphans >> "$LOG_FILE" 2>&1 || true
if [ -f "$MONITORING_DIR/docker-compose.monitoring.yml" ]; then
  $COMPOSE_CMD -f $MONITORING_DIR/docker-compose.monitoring.yml down --remove-orphans >> "$LOG_FILE" 2>&1 || true
fi

# –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ dangling-—Å–µ—Ç–∏, –Ω–æ –ù–ï —É–¥–∞–ª—è–µ–º mini_shop_shopnet
docker network prune -f >> "$LOG_FILE" 2>&1 || true
echo "‚úÖ Cleanup complete." | tee -a "$LOG_FILE"

# === DEPLOY LOCAL APP ===
echo "---------------------------------------------------------------"
echo "üèóÔ∏è  Running local deployment (Stage 5)..." | tee -a "$LOG_FILE"

if [ -x "$PROJECT_DIR/deploy_local.sh" ]; then
  "$PROJECT_DIR/deploy_local.sh" | tee -a "$LOG_FILE"
else
  echo "‚ùå deploy_local.sh not found or not executable in $PROJECT_DIR" | tee -a "$LOG_FILE"
  exit 1
fi

echo "‚úÖ Local deployment completed." | tee -a "$LOG_FILE"

# === DEPLOY MONITORING ===
echo "---------------------------------------------------------------"
echo "üìä Running monitoring deployment (Stage 6)..." | tee -a "$LOG_FILE"

if [ -x "$MONITORING_DIR/deploy_monitoring.sh" ]; then
  "$MONITORING_DIR/deploy_monitoring.sh" | tee -a "$LOG_FILE"
else
  echo "‚ùå deploy_monitoring.sh not found or not executable in $MONITORING_DIR" | tee -a "$LOG_FILE"
  exit 1
fi

echo "‚úÖ Monitoring deployment completed." | tee -a "$LOG_FILE"

# === FINAL SUMMARY ===
{
echo "==============================================================="
echo "üéØ All stages completed successfully ‚Äî $(date)"
echo "üìò Log saved to: $LOG_FILE"
echo "==============================================================="
} | tee -a "$LOG_FILE"
