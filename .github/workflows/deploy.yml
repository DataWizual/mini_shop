#name: üöÄ Mini Shop CI/CD Pipeline

#on:
#  push:
#    branches:
#      - main
#  workflow_dispatch:

#jobs:
#  build-and-deploy:
#    runs-on: ubuntu-latest

#    steps:
#      - name: üß© Checkout repository
#        uses: actions/checkout@v4

#      - name: üê≥ Set up Docker Buildx
#        uses: docker/setup-buildx-action@v3

#      - name: üîë Log in to DockerHub
#        uses: docker/login-action@v3
#        with:
#          username: ${{ secrets.DOCKERHUB_USERNAME }}
#          password: ${{ secrets.DOCKERHUB_TOKEN }}

#      - name: üèóÔ∏è Build and push backend image
#        uses: docker/build-push-action@v5
#        with:
#          context: ./backend
#          push: true
#          tags: ${{ secrets.DOCKERHUB_USERNAME }}/mini_shop_backend:latest

#      - name: ‚úÖ Verify backend image pushed successfully
#        run: |
#          docker manifest inspect ${{ secrets.DOCKERHUB_USERNAME }}/mini_shop_backend:latest

#      - name: üß† Print deployment summary
#        run: |
#          echo "‚úÖ CI/CD completed successfully!"
#          echo "üì¶ Image: ${{ secrets.DOCKERHUB_USERNAME }}/mini_shop_backend:latest"
#          echo "üïπÔ∏è Ready for pull on remote server."

name: üöÄ Mini Shop CI/CD Pipeline

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: üß© Checkout code
        uses: actions/checkout@v4

      - name: üê≥ Set up Docker
        uses: docker/setup-buildx-action@v3

      - name: üßÆ Generate dynamic version tag
        id: version
        run: echo "TAG=v1.0.${{ github.run_number }}" >> $GITHUB_ENV

      - name: üîë Login to DockerHub
        if: env.TAG != ''
        run: |
          echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin

      - name: üèóÔ∏è Build and push backend image
        run: |
          echo "üèóÔ∏è Building backend image..."
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/mini_shop_backend:${{ env.TAG }} ./backend
          docker tag ${{ secrets.DOCKERHUB_USERNAME }}/mini_shop_backend:${{ env.TAG }} \
                     ${{ secrets.DOCKERHUB_USERNAME }}/mini_shop_backend:latest
          
          echo "üì§ Pushing to DockerHub..."
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/mini_shop_backend:${{ env.TAG }}
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/mini_shop_backend:latest

      - name: üîß Optional monitoring image build (safe fallback)
        continue-on-error: true
        run: |
          if [ -f "./monitoring/docker-compose.monitoring.yml" ]; then
            echo "üèóÔ∏è Building monitoring image..."
            docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/mini_shop_monitoring:${{ env.TAG }} ./monitoring || exit 0
            docker tag ${{ secrets.DOCKERHUB_USERNAME }}/mini_shop_monitoring:${{ env.TAG }} \
                       ${{ secrets.DOCKERHUB_USERNAME }}/mini_shop_monitoring:latest || exit 0
            
            docker push ${{ secrets.DOCKERHUB_USERNAME }}/mini_shop_monitoring:${{ env.TAG }} || exit 0
            docker push ${{ secrets.DOCKERHUB_USERNAME }}/mini_shop_monitoring:latest || exit 0
          else
            echo "‚ÑπÔ∏è Monitoring directory not found ‚Äî skipping..."
          fi

      - name: ‚úÖ Verify images on DockerHub
        run: |
          echo "üîç Checking pushed tags..."
          docker pull ${{ secrets.DOCKERHUB_USERNAME }}/mini_shop_backend:${{ env.TAG }} || echo "‚ö†Ô∏è Image not found (check permissions)"
          docker images ${{ secrets.DOCKERHUB_USERNAME }}/mini_shop_backend

      - name: üöÄ Deploy to production (if SSH secrets exist)
        if: secrets.SSH_HOST != '' && secrets.SSH_USER != '' && secrets.SSH_KEY != ''
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            cd ~/mini_shop
            git pull origin main
            chmod +x deploy_all.sh
            ./deploy_all.sh

      - name: üü¢ Deployment complete
        run: echo "‚úÖ CI/CD pipeline completed successfully for tag ${{ env.TAG }}"
